---
title: "ukbics"
format: 
  html:
    page-layout: full
standalone: true
embed-resources: true
execute: 
  cache: true
  warning: false
---



```{r setup}
library(ggplot2)
library(dplyr)
library(purrr)
```


The nifti containing the image is found on the [imaging analysis page](https://www.fmrib.ox.ac.uk/datasets/ukbiobank/fbp/), under [Templates and training data needed by the pipeline](https://www.fmrib.ox.ac.uk/datasets/ukbiobank/fbp/templates/dckr_build/DATA_public.tar.gz) that links to a compressed archive called Data_public.tar.gz. The relevant templates are underneath the `group/` folder (e.g., `group/melodic_IC_100.nii.gz`).

That file contains all 100, but only the 55 good ones are needed. The labels for good components can be found online, at the [UKB imaging resource page](https://www.fmrib.ox.ac.uk/datasets/ukbiobank/index.html). Here is a small utility to download the list.

```{r components}

#' Download GoodComponents
#'  
#' @return vector indicating which volumes are good
download_components <- function(){
  components <- readr::read_lines(
    "https://www.fmrib.ox.ac.uk/datasets/ukbiobank/group_means/rfMRI_GoodComponents_d100_v1.txt") |> 
    stringr::str_split_1("[[:space:]]+") |> 
    as.numeric()
}


components <- download_components()
components
```

As expected, there are 55.

Next, use the good components to index the volumes in the nifti, and from those volumes extract individual slices. Slices are defined as whichever one has the largest voxel intensity within the volume. This "slice with the largest intensity" approach produces images that resemble the slices shown by the [netmat explorer](https://www.fmrib.ox.ac.uk/datasets/ukbiobank/netjs_d100/). 

The results of the extraction are concatenated and stored in a long-form tbl for easy plotting.

```{r loading}

#' Find Slice for Plotting
#'
#' @param component integer for indexing into nifti
#' @param nii_file nifti to be indexed
#'
#' @return tbl of values
get_slice_from_cog <- function(component, nii_file){
  nii <- RNifti::readNifti(nii_file, volumes = component) |>
    abs()
  cog <- arrayInd(which.max(nii), dim(nii))

  d <- nio::to_tbl0(nii) |>
    dplyr::filter(k == cog[3]) 
  d
}


out <- map(components, get_slice_from_cog, nii_file = "melodic_IC_100.nii.gz") |>
  bind_rows(.id = "t") |>
  mutate(t = as.integer(t))

```

Finally, we'll grab an MNI template to use as a background image.

```{r mni}
mni <- nio::to_tbl(MNITemplate::getMNIPath("Brain", res = "2mm"), measure = "brain") |>
  mutate(brain = if_else(brain==0, NA, brain)) |>
  na.omit()

```

Here is one quick way to plot the brains. 

```{r plot}
#| fig-height: 12
#| fig-width: 12
#| fig-dpi: 100

#' note rescaling by max value in component, 
#' which helps display both concentrated and diffuse components
out |>
  mutate(value = value / max(value), .by = t) |> 
  left_join(mni, by = join_by(i, j, k)) |>
  mutate(value = if_else(value == 0, NA, value)) |>
  ggplot(aes(x=i, y=j)) + 
  facet_wrap(~t) +
  geom_raster(aes(fill=brain)) +
  scale_fill_distiller(
    type = "seq",
    direction = -1,
    palette = "Greys", 
    na.value = "transparent") +
  ggnewscale::new_scale_fill() +
  geom_raster(aes(alpha=value, fill=value)) +
  scale_fill_viridis_c(option = "inferno", na.value = "transparent") +
  scale_alpha_continuous(range = c(0, 1)) +
  theme_void() +
  coord_fixed() +
  theme(legend.position = "none")
```



```{r}
sessioninfo::session_info()
```

